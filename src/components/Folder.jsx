/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public/models/folder.glb 
*/

import React, { useEffect, useState } from "react";
import { useGraph } from '@react-three/fiber'
import { useGLTF, useAnimations, Html } from '@react-three/drei'
import { SkeletonUtils } from 'three-stdlib'

const Folder = (props) => {
  const group = React.useRef()
  const { scene, animations } = useGLTF('./models/folder.glb')
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])
  const { nodes, materials } = useGraph(clone)
  const { actions, names, mixer } = useAnimations(animations, group)
  const [showText, setShowText] = React.useState(false);
  const [showTitle, setShowTitle] = React.useState(false);
  const [initializeLoop, setInitializeLoop] = React.useState(true);
  const [folderIsOpen, setFolderIsOpen] = React.useState(false);
  console.log(names)
  const [preview, setPreview] = useState();

  useEffect(() => {
    if (!props.file) {
      setPreview();
      return;
    }
    console.log(props.file)
    const url = URL.createObjectURL(props.file);
    setPreview(url);
    return () => {
      URL.revokeObjectURL(url);
    };
  }, [props.file]);

  useEffect(() => {
    const fn = (e) => {
      switch (e.action) {
        case actions[names[1]]:
          mixer.stopAllAction();
          actions[names[6]].reset().play();
          setShowText(!showText)
          break;
        case actions[names[4]]:
          mixer.stopAllAction();
          actions[names[2]].reset().play();
          break;
        case actions[names[3]]:
          mixer.stopAllAction();
          actions[names[5]].reset().play();
          break;
        case actions[names[0]]:
          mixer.stopAllAction();
          setFolderIsOpen(false)
          actions[names[5]].reset().play();
          break;
      }
    }
    mixer.addEventListener('finished', fn)
    return () => {
      mixer.removeEventListener('finished', fn)
    }
  }, [mixer, names]);

  useEffect(() => {
    if (initializeLoop === true) {
      actions[names[5]].reset().play();
    } else { }
  })


  return <>

    {showTitle && <Html position={[60, 9.8, 5]} rotation={[-1.5708, 1.5708, 1.5708]} transform>
        <div className="title" style={{fontSize: "100px"}}>
          {props.title}
        </div>
    </Html>}
    {showText && <Html position={[-60.5, 8, 40]} rotation={[-1.5708, 0.37, 1.5708]} transform>
      <div>
        <div>
          {props.description}
        </div>
        {preview && <img src={preview} className="image" />}
      </div>
    </Html>}

    <group
      {...props}
      dispose={null}
      so onClick={(e) => {
        switch (folderIsOpen) {
          case false:
            e.stopPropagation()
            actions[names[1]].repetitions = 1;
            mixer.stopAllAction();
            actions[names[1]].reset().play();
            setFolderIsOpen(true)
            break;
          case true:
            e.stopPropagation()
            actions[names[0]].repetitions = 1;
            mixer.stopAllAction();
            actions[names[0]].reset().play();
            setShowText(!showText)
            break;
        }
      }}
      onPointerEnter={() => {
        if (folderIsOpen === false) {
          actions[names[4]].repetitions = 1;
          mixer.stopAllAction();
          actions[names[4]].reset().play();
          setShowTitle(true)
        }
      }}
      onPointerLeave={() => {
        if (folderIsOpen === false) {
          actions[names[3]].repetitions = 1;
          mixer.stopAllAction();
          setInitializeLoop(false);
          actions[names[3]].reset().play();
          setShowTitle(false)
        }
      }}
    >
      <group ref={group} {...props} dispose={null}>
        <group name="Scene">
          <group name="Armature" position={[1.9, 3.036, 0]} scale={0.271}>
            <primitive object={nodes.Bone} />
            <primitive object={nodes.Bone001} />
          </group>
        </group>
      </group>
    </group>
  </>;
}

export default Folder

useGLTF.preload('./models/folder.glb')
