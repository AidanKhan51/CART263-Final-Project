/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public/models/drawer-one.glb 
*/
import React, { useEffect } from "react";
import { useGraph } from '@react-three/fiber'
import { useGLTF, Html, useAnimations } from '@react-three/drei'
import { SkeletonUtils } from 'three-stdlib'
import Folder from "./Folder";

const DrawerOne = (props) => {
  const group = React.useRef()
  const { scene, animations } = useGLTF('./models/drawer-one.glb')
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])
  const { nodes, materials } = useGraph(clone)
  const { actions, names, mixer } = useAnimations(animations, group)
  console.log(names)
  const [initializeLoop, setInitializeLoop] = React.useState(true);
  const [drawerIsOpen, setDrawerIsOpen] = React.useState(false);
  const [renderFolder, setRenderFolder] = React.useState(false);

  useEffect(() => {
    const fn = (e) => {
      switch (e.action) {
        case actions[names[1]]:
          mixer.stopAllAction();
          actions[names[5]].reset().play();
          setRenderFolder(true)
          break;
        case actions[names[2]]:
          mixer.stopAllAction();
          actions[names[4]].reset().play();
          break;
        case actions[names[0]]:
          mixer.stopAllAction();
          actions[names[3]].reset().play();
          break;
        case actions[names[6]]:
          mixer.stopAllAction();
          setDrawerIsOpen(false)
          actions[names[3]].reset().play();
          break;
      }
    }
    mixer.addEventListener('finished', fn)
    return () => {
      mixer.removeEventListener('finished', fn)
    }
  }, [mixer, names]);

  useEffect(() => {
    if (initializeLoop === true) {
      actions[names[3]].reset().play();
    } else { }
  })

  return <>
    <group
      {...props}
      dispose={null}
      so onClick={(e) => {
        switch (drawerIsOpen) {
          case false:
            e.stopPropagation()
            actions[names[1]].repetitions = 1;
            mixer.stopAllAction();
            actions[names[1]].reset().play();
            props.onCameraPositionChange([10, 15, 0])
            props.setEnabled(false)
            setDrawerIsOpen(true)
            break;
          case true:
            e.stopPropagation()
            setRenderFolder(false)
            actions[names[6]].repetitions = 1;
            mixer.stopAllAction();
            actions[names[6]].reset().play();
            props.setEnabled(true)
            break;
        }
      }}
      onPointerEnter={() => {
        if (drawerIsOpen === false) {
          actions[names[2]].repetitions = 1;
          mixer.stopAllAction();
          actions[names[2]].reset().play();
        }
      }}
      onPointerLeave={() => {
        if (drawerIsOpen === false) {
          actions[names[0]].repetitions = 1;
          mixer.stopAllAction();
          setInitializeLoop(false);
          actions[names[0]].reset().play();
        }
      }}
    >
      <group ref={group} {...props} dispose={null}>
        <group name="Scene">
          <group name="SliderOne" rotation={[0, 0, -Math.PI / 2]} scale={0.571}>
            <primitive object={nodes.BoneBig} />
          </group>
          <mesh name="Cube004" geometry={nodes.Cube004.geometry} material={materials['Slider 1']} position={[0.497, 3.34, 0.828]} scale={[0.861, 0.054, 0.032]} />
        </group>
      </group>
    </group >
    {renderFolder && <Folder scale={2} />}
  </>;
}

export default DrawerOne

useGLTF.preload('./models/drawer-one.glb')
